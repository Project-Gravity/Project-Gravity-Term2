// Generic receiver material
material LiSpSM_base
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0 
			specular 0 0 0 0 
			// Really basic vertex program
			vertex_program_ref LiSpSMAmbientOneTexture
			{
			}
			
		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass lighting
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0 
			
			// do this for each light
			iteration once_per_light

		
			scene_blend add

			// Vertex program reference
			vertex_program_ref LiSpSMNormalMapReceiverVP
			{
			}
			shadow_receiver_vertex_program_ref LiSpSMNormalMapReceiverVP
			{
			}

			// Fragment program
			fragment_program_ref LiSpSMNormalMapReceiverFP
			{
			}
			shadow_receiver_fragment_program_ref LiSpSMNormalMapReceiverFP
			{
			}

			// shadowmap texture will be bound by code

			// Base bump map
			texture_unit
			{
				texture $BaseNormalMap
				colour_op replace
			}
			// Normalisation cube map
			texture_unit
			{
				cubic_texture $NormalMap combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
			}

		}
		
		// Decal pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			lighting off
			// Really basic vertex program
			vertex_program_ref LiSpSMAmbientOneTexture
			{
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero

			texture_unit
			{
				texture $Diffuse
			}			
		}
	}
}

